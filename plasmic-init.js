// plasmic-init.js
import { initPlasmicLoader } from "@plasmicapp/loader-nextjs";


export const PLASMIC = initPlasmicLoader({
  projects: [
    {
      id: "rdUbbFyBk8F7AduKnQeuGL",
      token: "ULH0HD4xX1eA3r6fDn3O94tMMi7NTqtzBvCgDVS1NZ9r9VMmmwCgYf9AEQxXfQPOjxPE3sE4dXzfAqCgbw",
    },
  ],
  preview: true,
});

import ThreeCanvas from "./components/three/canvas/ThreeCanvas"
import { CustomScroll } from "./components/effects/CustomScroll";

PLASMIC.registerComponent(ThreeCanvas, {
  name: "TheeCanvas",
  displayName: "Three.js Scroll Effect",
  description: "Animate Guitar and Floor objects in 3D scene based on scroll",
props: {
    cameraPosition: {
      type: "object",
      displayName: "Camera Position",
      defaultValue: [0, 1, 1],
      description: "Camera position [x, y, z]",
    },
    cameraFov: {
      type: "number",
      displayName: "Camera FOV",
      defaultValue: 25,
      description: "Camera field of view",
    },
    animationMode: {
      type: "choice",
      options: ["interpolation", "duration"],
      defaultValue: "interpolation",
      displayName: "Animation Mode",
      description: "Interpolation: moves with scroll | Duration: animates over time when triggered",
    },
    duration: {
      type: "number",
      defaultValue: 1000,
      displayName: "Duration (ms)",
      description: "Animation duration in milliseconds (only for duration mode)",
      hidden: (props) => props.animationMode !== "duration",
    },
    // Guitar Properties Section
    guitarStartX: {
      type: "number",
      displayName: "Guitar - Start X Position",
      defaultValue: 0,
      description: "Initial X position of Guitar",
    },
    guitarStartY: {
      type: "number",
      displayName: "Guitar - Start Y Position",
      defaultValue: 0,
      description: "Initial Y position of Guitar",
    },
    guitarStartZ: {
      type: "number",
      displayName: "Guitar - Start Z Position",
      defaultValue: 0,
      description: "Initial Z position of Guitar",
    },
    guitarEndX: {
      type: "number",
      displayName: "Guitar - End X Position",
      defaultValue: .2,
      description: "Final X position of Guitar",
    },
    guitarEndY: {
      type: "number",
      displayName: "Guitar - End Y Position",
      defaultValue: -0.2,
      description: "Final Y position of Guitar",
    },
    guitarEndZ: {
      type: "number",
      displayName: "Guitar - End Z Position",
      defaultValue: -1,
      description: "Final Z position of Guitar",
    },
    guitarStartRotationX: {
      type: "number",
      displayName: "Guitar - Start Rotation X",
      defaultValue: -2 / Math.PI,
      description: "Initial X rotation (in radians)",
    },
    guitarStartRotationY: {
      type: "number",
      displayName: "Guitar - Start Rotation Y",
      defaultValue: 1.5 / Math.PI,
      description: "Initial Y rotation (in radians)",
    },
    guitarStartRotationZ: {
      type: "number",
      displayName: "Guitar - Start Rotation Z",
      defaultValue: -6.9 / Math.PI,
      description: "Initial Z rotation (in radians)",
    },
    guitarEndRotationX: {
      type: "number",
      displayName: "Guitar - End Rotation X",
      defaultValue: Math.PI / 2,
      description: "Final X rotation (in radians)",
    },
    guitarEndRotationY: {
      type: "number",
      displayName: "Guitar - End Rotation Y",
      defaultValue: Math.PI ,
      description: "Final Y rotation (in radians)",
    },
    guitarEndRotationZ: {
      type: "number",
      displayName: "Guitar - End Rotation Z",
      defaultValue: Math.PI / 2,
      description: "Final Z rotation (in radians)",
    },
    guitarStartOpacity: {
      type: "number",
      displayName: "Guitar - Start Opacity",
      defaultValue: 1,
      min: 0,
      max: 1,
      description: "Initial opacity (0-1)",
    },
    guitarEndOpacity: {
      type: "number",
      displayName: "Guitar - End Opacity",
      defaultValue: 1,
      min: 0,
      max: 1,
      description: "Final opacity (0-1)",
    },
    // Floor Properties Section
    floorStartX: {
      type: "number",
      displayName: "Floor - Start X Position",
      defaultValue: 0,
      description: "Initial X position of Floor",
    },
    floorStartY: {
      type: "number",
      displayName: "Floor - Start Y Position",
      defaultValue: -0.2,
      description: "Initial Y position of Floor",
    },
    floorStartZ: {
      type: "number",
      displayName: "Floor - Start Z Position",
      defaultValue: 0,
      description: "Initial Z position of Floor",
    },
    floorEndX: {
      type: "number",
      displayName: "Floor - End X Position",
      defaultValue: 0,
      description: "Final X position of Floor",
    },
    floorEndY: {
      type: "number",
      displayName: "Floor - End Y Position",
      defaultValue: -0.2,
      description: "Final Y position of Floor",
    },
    floorEndZ: {
      type: "number",
      displayName: "Floor - End Z Position",
      defaultValue: 0,
      description: "Final Z position of Floor",
    },
    floorStartRotationX: {
      type: "number",
      displayName: "Floor - Start Rotation X",
      defaultValue: -Math.PI / 2,
      description: "Initial X rotation (in radians)",
    },
    floorStartRotationY: {
      type: "number",
      displayName: "Floor - Start Rotation Y",
      defaultValue: 0,
      description: "Initial Y rotation (in radians)",
    },
    floorStartRotationZ: {
      type: "number",
      displayName: "Floor - Start Rotation Z",
      defaultValue: 0,
      description: "Initial Z rotation (in radians)",
    },
    floorEndRotationX: {
      type: "number",
      displayName: "Floor - End Rotation X",
      defaultValue: -Math.PI / 2,
      description: "Final X rotation (in radians)",
    },
    floorEndRotationY: {
      type: "number",
      displayName: "Floor - End Rotation Y",
      defaultValue: 0,
      description: "Final Y rotation (in radians)",
    },
    floorEndRotationZ: {
      type: "number",
      displayName: "Floor - End Rotation Z",
      defaultValue: 0,
      description: "Final Z rotation (in radians)",
    },
    floorStartOpacity: {
      type: "number",
      displayName: "Floor - Start Opacity",
      defaultValue: 0,
      min: 0,
      max: 1,
      description: "Initial opacity (0-1)",
    },
    floorEndOpacity: {
      type: "number",
      displayName: "Floor - End Opacity",
      defaultValue: 1,
      min: 0,
      max: 1,
      description: "Final opacity (0-1)",
    },
    scrollStart: {
      type: "number",
      defaultValue: 0,
      displayName: "Scroll Start (px)",
      description: "Interpolation: animation start | Duration: trigger point",
    },
    scrollEnd: {
      type: "number",
      defaultValue: 1000,
      displayName: "Scroll End (px)",
      description: "Scroll position where interpolation completes (interpolation mode only)",
      hidden: (props) => props.animationMode !== "interpolation",
    },
    className: {
      type: "class",
      displayName: "CSS Class",
    },
  },
  styleProps: [
    "width",
    "height",
    "minWidth",
    "maxWidth", 
    "minHeight",
    "maxHeight",
    "position",
    "top",
    "left",
    "right",
    "bottom",
    "zIndex",
    "display",
    "flexDirection",
    "flexWrap",
    "justifyContent",
    "alignItems",
    "gap",
    "padding",
    "margin",
    "background",
    "backgroundColor",
    "border",
    "borderRadius",
    "overflow",
  ],
  importPath: "../components/three/canvas/TheeCanvas",
  isDefaultExport: true,
});

// Plasmic Registration
// Plasmic Registration
// Plasmic Registration
// Plasmic Registration
PLASMIC.registerComponent(CustomScroll, {
  name: "CustomScroll",
  displayName: "Custom Scroll Effect",
  description: "Animate any CSS properties based on scroll with multiple breakpoints and easing functions",
  props: {
    children: {
      type: "slot",
      defaultValue: {
        type: "text",
        value: "Scroll to animate",
      },
    },
    positionType: {
      type: "choice",
      options: ["fixed", "absolute", "relative"],
      defaultValue: "relative",
      displayName: "Position Type",
      description: "Position type (fixed, absolute, or relative. In studio, always shows as relative)",
    },
    animationMode: {
      type: "choice",
      options: ["interpolation", "duration"],
      defaultValue: "interpolation",
      displayName: "Animation Mode",
      description: "Interpolation: moves with scroll | Duration: animates over time when triggered",
    },
    duration: {
      type: "number",
      defaultValue: 1000,
      displayName: "Duration (ms)",
      description: "Animation duration in milliseconds (only for duration mode)",
      hidden: (props) => props.animationMode !== "duration",
    },
    easingFunction: {
      type: "choice",
      options: [
        "linear",
        "easeInQuad",
        "easeOutQuad",
        "easeInOutQuad",
        "easeInCubic",
        "easeOutCubic",
        "easeInOutCubic",
        "easeInQuart",
        "easeOutQuart",
        "easeInOutQuart",
        "easeInQuint",
        "easeOutQuint",
        "easeInOutQuint",
        "easeInSine",
        "easeOutSine",
        "easeInOutSine",
        "easeInExpo",
        "easeOutExpo",
        "easeInOutExpo",
        "easeInCirc",
        "easeOutCirc",
        "easeInOutCirc",
        "easeInBack",
        "easeOutBack",
        "easeInOutBack",
        "easeInElastic",
        "easeOutElastic",
        "easeInOutElastic",
        "easeInBounce",
        "easeOutBounce",
        "easeInOutBounce",
      ],
      defaultValue: "linear",
      displayName: "Easing Function",
      description: "Timing function for the animation (applies to all breakpoints unless overridden)",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    breakpoints: {
      type: "array",
      displayName: "Animation Breakpoints",
      description: "Define multiple scroll breakpoints with custom CSS properties and easing",
      itemType: {
        type: "object",
        fields: {
          scrollStart: {
            type: "number",
            displayName: "Scroll Start (px)",
            description: "Scroll position where this breakpoint begins",
            defaultValue: 0,
          },
          scrollEnd: {
            type: "number",
            displayName: "Scroll End (px)",
            description: "Scroll position where this breakpoint ends (interpolation mode)",
            defaultValue: 1000,
          },
          easingFunction: {
            type: "choice",
            options: [
              "linear",
              "easeInQuad",
              "easeOutQuad",
              "easeInOutQuad",
              "easeInCubic",
              "easeOutCubic",
              "easeInOutCubic",
              "easeInQuart",
              "easeOutQuart",
              "easeInOutQuart",
              "easeInQuint",
              "easeOutQuint",
              "easeInOutQuint",
              "easeInSine",
              "easeOutSine",
              "easeInOutSine",
              "easeInExpo",
              "easeOutExpo",
              "easeInOutExpo",
              "easeInCirc",
              "easeOutCirc",
              "easeInOutCirc",
              "easeInBack",
              "easeOutBack",
              "easeInOutBack",
              "easeInElastic",
              "easeOutElastic",
              "easeInOutElastic",
              "easeInBounce",
              "easeOutBounce",
              "easeInOutBounce",
            ],
            displayName: "Easing Function",
            description: "Timing function for this specific breakpoint",
            defaultValue: "linear",
          },
          styles: {
            type: "array",
            displayName: "Animated Styles",
            description: "Add CSS properties to animate (click + to add more)",
            itemType: {
              type: "object",
              fields: {
                property: {
                  type: "choice",
                  displayName: "CSS Property",
                  description: "Select which CSS property to animate",
                  options: [
                    "top",
                    "left",
                    "right",
                    "bottom",
                    "width",
                    "height",
                    "opacity",
                    "borderRadius",
                    "scale",
                    "rotate",
                    "translateX",
                    "translateY",
                    "translateZ",
                    "scaleX",
                    "scaleY",
                    "scaleZ",
                    "rotateX",
                    "rotateY",
                    "rotateZ",
                    "skewX",
                    "skewY",
                    "backgroundColor",
                    "color",
                    "fontSize",
                    "letterSpacing",
                    "lineHeight",
                    "padding",
                    "margin",
                    "borderWidth",
                    "boxShadow",
                    "textShadow",
                    "filter",
                    "backdropFilter",
                  ],
                  defaultValue: "opacity",
                },
                startValue: {
                  type: "string",
                  displayName: "Start Value",
                  description: "Initial value (e.g., '100px', '0', '1', '45deg', '#ff0000')",
                  defaultValue: "0",
                },
                endValue: {
                  type: "string",
                  displayName: "End Value",
                  description: "Final value (e.g., '500px', '1', '0', '180deg', '#0000ff')",
                  defaultValue: "1",
                },
              },
            },
          },
        },
      },
    },
    // Legacy props for backwards compatibility (hidden when breakpoints are used)
    startTop: {
      type: "string",
      displayName: "Start Top",
      description: "Initial top position (e.g., '100px', '50vh', '10%')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startLeft: {
      type: "string",
      displayName: "Start Left",
      description: "Initial left position (e.g., '0px', '25vw')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startRight: {
      type: "string",
      displayName: "Start Right",
      description: "Initial right position (e.g., '0px', '10vw')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startBottom: {
      type: "string",
      displayName: "Start Bottom",
      description: "Initial bottom position (e.g., '20px', '5vh')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endTop: {
      type: "string",
      displayName: "End Top",
      description: "Final top position (e.g., '500px', '80vh')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endLeft: {
      type: "string",
      displayName: "End Left",
      description: "Final left position (e.g., '100px', '50vw')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endRight: {
      type: "string",
      displayName: "End Right",
      description: "Final right position (e.g., '100px', '20vw')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endBottom: {
      type: "string",
      displayName: "End Bottom",
      description: "Final bottom position (e.g., '100px', '10vh')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    scrollStart: {
      type: "number",
      defaultValue: 0,
      displayName: "Scroll Start (px)",
      description: "Interpolation: animation start | Duration: trigger point",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    scrollEnd: {
      type: "number",
      defaultValue: 1000,
      displayName: "Scroll End (px)",
      description: "Scroll position where interpolation completes (interpolation mode only)",
      hidden: (props) => props.animationMode !== "interpolation" || (props.breakpoints && props.breakpoints.length > 0),
    },
    startOpacity: {
      type: "number",
      defaultValue: 1,
      min: 0,
      max: 1,
      displayName: "Start Opacity",
      description: "Initial opacity (0-1)",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endOpacity: {
      type: "number",
      defaultValue: 1,
      min: 0,
      max: 1,
      displayName: "End Opacity",
      description: "Final opacity (0-1)",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startBorderRadius: {
      type: "string",
      displayName: "Start Border Radius",
      description: "Initial border radius (e.g., '0px', '50%', '20px')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endBorderRadius: {
      type: "string",
      displayName: "End Border Radius",
      description: "Final border radius (e.g., '50%', '100px', '0px')",
      defaultValueHint: "0px",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startWidth: {
      type: "string",
      displayName: "Start Width",
      description: "Initial width (e.g., '100px', '50vw', '100%')",
      defaultValueHint: "auto",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endWidth: {
      type: "string",
      displayName: "End Width",
      description: "Final width (e.g., '200px', '80vw', '50%')",
      defaultValueHint: "auto",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    startHeight: {
      type: "string",
      displayName: "Start Height",
      description: "Initial height (e.g., '100px', '50vh', '100%')",
      defaultValueHint: "auto",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    endHeight: {
      type: "string",
      displayName: "End Height",
      description: "Final height (e.g., '200px', '80vh', '50%')",
      defaultValueHint: "auto",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    zIndex: {
      type: "number",
      defaultValue: 1000,
      displayName: "Z-Index",
      description: "Stacking order",
    },
  },
  importPath: "./components/effects/CustomScroll",
  isDefaultExport: false,
});