// plasmic-init.js
import { initPlasmicLoader } from "@plasmicapp/loader-nextjs";


export const PLASMIC = initPlasmicLoader({
  projects: [
    {
      id: "rdUbbFyBk8F7AduKnQeuGL",
      token: "ULH0HD4xX1eA3r6fDn3O94tMMi7NTqtzBvCgDVS1NZ9r9VMmmwCgYf9AEQxXfQPOjxPE3sE4dXzfAqCgbw",
    },
  ],
  preview: true,
});

import ThreeCanvas from "./components/three/canvas/ThreeCanvas"
import { CustomScroll } from "./components/effects/CustomScroll";
import Loader from "./components/loaders/Loader";

PLASMIC.registerComponent(Loader, {
  name: "440 Loader",
  displayName: "440 Loader",
  discription: "Some discription",
  styleProps: [
    "width",
    "height",
    "minWidth",
    "maxWidth", 
    "minHeight",
    "maxHeight",
    "position",
    "top",
    "left",
    "right",
    "bottom",
    "zIndex",
    "display",
    "flexDirection",
    "flexWrap",
    "justifyContent",
    "alignItems",
    "gap",
    "padding",
    "margin",
    "background",
    "backgroundColor",
    "border",
    "borderRadius",
    "overflow",
  ],
  importPath: "./components/loaders/Loader",
  isDefaultExport: true,
})

PLASMIC.registerComponent(ThreeCanvas, {
  name: "TheeCanvas",
  displayName: "Three.js Scroll Effect",
  description: "Animate camera and 3D scene based on scroll with multiple breakpoints",
  props: {
    animationMode: {
      type: "choice",
      options: ["interpolation", "duration"],
      defaultValue: "interpolation",
      displayName: "Animation Mode",
      description: "Interpolation: moves with scroll | Duration: animates over time when triggered",
    },
    duration: {
      type: "number",
      defaultValue: 1000,
      displayName: "Duration (ms)",
      description: "Animation duration in milliseconds (only for duration mode)",
      hidden: (props) => props.animationMode !== "duration",
    },
    easingFunction: {
      type: "choice",
      options: [
        "linear",
        "easeInQuad",
        "easeOutQuad",
        "easeInOutQuad",
        "easeInCubic",
        "easeOutCubic",
        "easeInOutCubic",
        "easeInQuart",
        "easeOutQuart",
        "easeInOutQuart",
        "easeInQuint",
        "easeOutQuint",
        "easeInOutQuint",
        "easeInSine",
        "easeOutSine",
        "easeInOutSine",
        "easeInExpo",
        "easeOutExpo",
        "easeInOutExpo",
        "easeInCirc",
        "easeOutCirc",
        "easeInOutCirc",
        "easeInBack",
        "easeOutBack",
        "easeInOutBack",
        "easeInElastic",
        "easeOutElastic",
        "easeInOutElastic",
        "easeInBounce",
        "easeOutBounce",
        "easeInOutBounce",
      ],
      defaultValue: "linear",
      displayName: "Easing Function",
      description: "Timing function for the animation (applies to all breakpoints unless overridden)",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    breakpoints: {
      type: "array",
      displayName: "Camera Breakpoints",
      description: "Define multiple scroll breakpoints with camera positions, rotations, FOV and easing",
      itemType: {
        type: "object",
        fields: {
          scrollStart: {
            type: "number",
            displayName: "Scroll Start (px)",
            description: "Scroll position where this breakpoint begins",
            defaultValue: 0,
          },
          scrollEnd: {
            type: "number",
            displayName: "Scroll End (px)",
            description: "Scroll position where this breakpoint ends (interpolation mode)",
            defaultValue: 1000,
          },
          easingFunction: {
            type: "choice",
            options: [
              "linear",
              "easeInQuad",
              "easeOutQuad",
              "easeInOutQuad",
              "easeInCubic",
              "easeOutCubic",
              "easeInOutCubic",
              "easeInQuart",
              "easeOutQuart",
              "easeInOutQuart",
              "easeInQuint",
              "easeOutQuint",
              "easeInOutQuint",
              "easeInSine",
              "easeOutSine",
              "easeInOutSine",
              "easeInExpo",
              "easeOutExpo",
              "easeInOutExpo",
              "easeInCirc",
              "easeOutCirc",
              "easeInOutCirc",
              "easeInBack",
              "easeOutBack",
              "easeInOutBack",
              "easeInElastic",
              "easeOutElastic",
              "easeInOutElastic",
              "easeInBounce",
              "easeOutBounce",
              "easeInOutBounce",
            ],
            displayName: "Easing Function",
            description: "Timing function for this specific breakpoint",
            defaultValue: "linear",
          },
          cameraPosition: {
            type: "object",
            displayName: "Camera Position",
            defaultValue: [0, 1, 1],
            description: "Camera position [x, y, z] at start of breakpoint",
          },
          endCameraPosition: {
            type: "object",
            displayName: "End Camera Position",
            defaultValue: [0, 1, 1],
            description: "Camera position [x, y, z] at end of breakpoint (interpolation mode)",
          },
          cameraRotation: {
            type: "object",
            displayName: "Camera Rotation",
            defaultValue: [0, 0, 0],
            description: "Camera rotation [x, y, z] in radians at start",
          },
          endCameraRotation: {
            type: "object",
            displayName: "End Camera Rotation",
            defaultValue: [0, 0, 0],
            description: "Camera rotation [x, y, z] in radians at end (interpolation mode)",
          },
          cameraFov: {
            type: "number",
            displayName: "Camera FOV",
            defaultValue: 25,
            description: "Camera field of view at start of breakpoint",
          },
          endCameraFov: {
            type: "number",
            displayName: "End Camera FOV",
            defaultValue: 25,
            description: "Camera field of view at end of breakpoint (interpolation mode)",
          },
        },
      },
    },
    // Legacy props for backwards compatibility (hidden when breakpoints are used)
    cameraPosition: {
      type: "object",
      displayName: "Camera Position",
      defaultValue: [0, 1, 1],
      description: "Camera position [x, y, z]",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    cameraRotation: {
      type: "object",
      displayName: "Camera Rotation",
      defaultValue: [0, 0, 0],
      description: "Camera rotation [x, y, z] in radians",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    cameraFov: {
      type: "number",
      displayName: "Camera FOV",
      defaultValue: 25,
      description: "Camera field of view",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    scrollStart: {
      type: "number",
      defaultValue: 0,
      displayName: "Scroll Start (px)",
      description: "Interpolation: animation start | Duration: trigger point",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    scrollEnd: {
      type: "number",
      defaultValue: 1000,
      displayName: "Scroll End (px)",
      description: "Scroll position where interpolation completes (interpolation mode only)",
      hidden: (props) => props.animationMode !== "interpolation" || (props.breakpoints && props.breakpoints.length > 0),
    },
    className: {
      type: "class",
      displayName: "CSS Class",
    },
  },
  styleProps: [
    "width",
    "height",
    "minWidth",
    "maxWidth", 
    "minHeight",
    "maxHeight",
    "position",
    "top",
    "left",
    "right",
    "bottom",
    "zIndex",
    "display",
    "flexDirection",
    "flexWrap",
    "justifyContent",
    "alignItems",
    "gap",
    "padding",
    "margin",
    "background",
    "backgroundColor",
    "border",
    "borderRadius",
    "overflow",
  ],
  importPath: "../components/three/canvas/ThreeCanvas",
  isDefaultExport: true,
});

// Plasmic Registration
// Plasmic Registration
PLASMIC.registerComponent(CustomScroll, {
  name: "CustomScroll",
  displayName: "Custom Scroll Effect",
  description: "Animate any CSS properties based on scroll with multiple breakpoints, easing functions, and click-triggered effects",
  props: {
    children: {
      type: "slot",
      defaultValue: {
        type: "text",
        value: "Scroll to animate",
      },
    },
    positionType: {
      type: "choice",
      options: ["fixed", "absolute", "relative"],
      defaultValue: "relative",
      displayName: "Position Type",
      description: "Position type (fixed, absolute, or relative. In studio, always shows as relative)",
    },
    animationMode: {
      type: "choice",
      options: ["interpolation", "duration"],
      defaultValue: "interpolation",
      displayName: "Animation Mode",
      description: "Interpolation: moves with scroll | Duration: animates over time when triggered",
    },
    duration: {
      type: "number",
      defaultValue: 1000,
      displayName: "Duration (ms)",
      description: "Animation duration in milliseconds (only for duration mode)",
      hidden: (props) => props.animationMode !== "duration",
    },
    triggerId: {
      type: "string",
      displayName: "Trigger Element ID",
      description: "ID of element to click to trigger animation (duration mode only)",
      hidden: (props) => props.animationMode !== "duration",
    },
    easingFunction: {
      type: "choice",
      options: [
        "linear",
        "easeInQuad",
        "easeOutQuad",
        "easeInOutQuad",
        "easeInCubic",
        "easeOutCubic",
        "easeInOutCubic",
        "easeInQuart",
        "easeOutQuart",
        "easeInOutQuart",
        "easeInQuint",
        "easeOutQuint",
        "easeInOutQuint",
        "easeInSine",
        "easeOutSine",
        "easeInOutSine",
        "easeInExpo",
        "easeOutExpo",
        "easeInOutExpo",
        "easeInCirc",
        "easeOutCirc",
        "easeInOutCirc",
        "easeInBack",
        "easeOutBack",
        "easeInOutBack",
        "easeInElastic",
        "easeOutElastic",
        "easeInOutElastic",
        "easeInBounce",
        "easeOutBounce",
        "easeInOutBounce",
      ],
      defaultValue: "linear",
      displayName: "Easing Function",
      description: "Timing function for the animation (applies to all breakpoints unless overridden)",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    breakpoints: {
      type: "array",
      displayName: "Scroll Animation Breakpoints",
      description: "Define multiple scroll breakpoints with custom CSS properties and easing",
      itemType: {
        type: "object",
        fields: {
          scrollStart: {
            type: "number",
            displayName: "Scroll Start (px)",
            description: "Scroll position where this breakpoint begins",
            defaultValue: 0,
          },
          scrollEnd: {
            type: "number",
            displayName: "Scroll End (px)",
            description: "Scroll position where this breakpoint ends (interpolation mode)",
            defaultValue: 1000,
          },
          easingFunction: {
            type: "choice",
            options: [
              "linear",
              "easeInQuad",
              "easeOutQuad",
              "easeInOutQuad",
              "easeInCubic",
              "easeOutCubic",
              "easeInOutCubic",
              "easeInQuart",
              "easeOutQuart",
              "easeInOutQuart",
              "easeInQuint",
              "easeOutQuint",
              "easeInOutQuint",
              "easeInSine",
              "easeOutSine",
              "easeInOutSine",
              "easeInExpo",
              "easeOutExpo",
              "easeInOutExpo",
              "easeInCirc",
              "easeOutCirc",
              "easeInOutCirc",
              "easeInBack",
              "easeOutBack",
              "easeInOutBack",
              "easeInElastic",
              "easeOutElastic",
              "easeInOutElastic",
              "easeInBounce",
              "easeOutBounce",
              "easeInOutBounce",
            ],
            displayName: "Easing Function",
            description: "Timing function for this specific breakpoint",
            defaultValue: "linear",
          },
          styles: {
            type: "array",
            displayName: "Animated Styles",
            description: "Add CSS properties to animate (click + to add more)",
            itemType: {
              type: "object",
              fields: {
                property: {
                  type: "choice",
                  displayName: "CSS Property",
                  description: "Select which CSS property to animate",
                  options: [
                    "top",
                    "left",
                    "right",
                    "bottom",
                    "width",
                    "height",
                    "opacity",
                    "borderRadius",
                    "scale",
                    "rotate",
                    "translateX",
                    "translateY",
                    "translateZ",
                    "scaleX",
                    "scaleY",
                    "scaleZ",
                    "rotateX",
                    "rotateY",
                    "rotateZ",
                    "skewX",
                    "skewY",
                    "backgroundColor",
                    "color",
                    "fontSize",
                    "letterSpacing",
                    "lineHeight",
                    "padding",
                    "margin",
                    "borderWidth",
                    "boxShadow",
                    "textShadow",
                    "filter",
                    "backdropFilter",
                  ],
                  defaultValue: "opacity",
                },
                endValue: {
                  type: "string",
                  displayName: "End Value",
                  description: "Final value (e.g., '500px', '1', '0', '180deg', '#0000ff')",
                  defaultValue: "1",
                },
              },
            },
          },
        },
      },
    },
    initialStyles: {
      type: "array",
      displayName: "Initial Animation Styles",
      description: "Define the initial values of styles that animations modify",
      itemType: {
        type: "object",
        fields: {
          property: {
            type: "choice",
            displayName: "CSS Property",
            description: "Select which CSS property to initialize",
            options: [
              "top",
              "left",
              "right",
              "bottom",
              "width",
              "height",
              "opacity",
              "borderRadius",
              "scale",
              "rotate",
              "translateX",
              "translateY",
              "translateZ",
              "scaleX",
              "scaleY",
              "scaleZ",
              "rotateX",
              "rotateY",
              "rotateZ",
              "skewX",
              "skewY",
              "backgroundColor",
              "color",
              "fontSize",
              "letterSpacing",
              "lineHeight",
              "padding",
              "margin",
              "borderWidth",
              "boxShadow",
              "textShadow",
              "filter",
              "backdropFilter",
            ],
            defaultValue: "opacity",
          },
          startValue: {
            type: "string",
            displayName: "Start Value",
            description: "Initial value (e.g., '100px', '0', '1', '45deg', '#ff0000')",
            defaultValue: "0",
          }
        }
      }
    },
    onLoadStyles: {
      type: "array",
      displayName: "On Load Animation Styles",
      description: "Define the values of styles to modify on load",
      itemType: {
        type: "object",
        fields: {
          property: {
            type: "choice",
            displayName: "CSS Property",
            description: "Select which CSS property to initialize",
            options: [
              "top",
              "left",
              "right",
              "bottom",
              "width",
              "height",
              "opacity",
              "borderRadius",
              "scale",
              "rotate",
              "translateX",
              "translateY",
              "translateZ",
              "scaleX",
              "scaleY",
              "scaleZ",
              "rotateX",
              "rotateY",
              "rotateZ",
              "skewX",
              "skewY",
              "backgroundColor",
              "color",
              "fontSize",
              "letterSpacing",
              "lineHeight",
              "padding",
              "margin",
              "borderWidth",
              "boxShadow",
              "textShadow",
              "filter",
              "backdropFilter",
            ],
            defaultValue: "opacity",
          },
          startValue: {
            type: "string",
            displayName: "Start Value",
            description: "Initial value (e.g., '100px', '0', '1', '45deg', '#ff0000')",
            defaultValue: "0",
          }
        }
      }
    },
    onLoadEasingFunction: {
      type: "choice",
      options: [
        "linear",
        "easeInQuad",
        "easeOutQuad",
        "easeInOutQuad",
        "easeInCubic",
        "easeOutCubic",
        "easeInOutCubic",
        "easeInQuart",
        "easeOutQuart",
        "easeInOutQuart",
        "easeInQuint",
        "easeOutQuint",
        "easeInOutQuint",
        "easeInSine",
        "easeOutSine",
        "easeInOutSine",
        "easeInExpo",
        "easeOutExpo",
        "easeInOutExpo",
        "easeInCirc",
        "easeOutCirc",
        "easeInOutCirc",
        "easeInBack",
        "easeOutBack",
        "easeInOutBack",
        "easeInElastic",
        "easeOutElastic",
        "easeInOutElastic",
        "easeInBounce",
        "easeOutBounce",
        "easeInOutBounce",
      ],
      defaultValue: "linear",
      displayName: "On Load Easing Function",
      description: "Timing function for the on load animation.",
      hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    },
    onLoadDuration: {
      type: "number",
      displayName: "Duration (ms)",
      description: "How long should this effect animate",
      defaultValue: 1000,
    },
    onLoadDelay: {
      type: "number",
      displayName: "Delay (ms)",
      description: "How long should this effect wait to animate",
      defaultValue: 0,
    },
    clickEffects: {
      type: "array",
      displayName: "Click-Triggered Effects",
      description: "Define effects that trigger when specific elements are clicked (works alongside scroll animations)",
      itemType: {
        type: "object",
        fields: {
          triggerId: {
            type: "string",
            displayName: "Trigger Element ID",
            description: "ID of the element that triggers this effect when clicked",
            defaultValue: "",
          },
          duration: {
            type: "number",
            displayName: "Duration (ms)",
            description: "How long this effect takes to animate",
            defaultValue: 1000,
          },
          delay: {
            type: "number",
            displayName: "Delay (ms)",
            description: "How long should this effect wait to animate",
            defaultValue: 0,
          },
          easingFunction: {
            type: "choice",
            options: [
              "linear",
              "easeInQuad",
              "easeOutQuad",
              "easeInOutQuad",
              "easeInCubic",
              "easeOutCubic",
              "easeInOutCubic",
              "easeInQuart",
              "easeOutQuart",
              "easeInOutQuart",
              "easeInQuint",
              "easeOutQuint",
              "easeInOutQuint",
              "easeInSine",
              "easeOutSine",
              "easeInOutSine",
              "easeInExpo",
              "easeOutExpo",
              "easeInOutExpo",
              "easeInCirc",
              "easeOutCirc",
              "easeInOutCirc",
              "easeInBack",
              "easeOutBack",
              "easeInOutBack",
              "easeInElastic",
              "easeOutElastic",
              "easeInOutElastic",
              "easeInBounce",
              "easeOutBounce",
              "easeInOutBounce",
            ],
            displayName: "Easing Function",
            description: "Animation timing function for this effect",
            defaultValue: "linear",
          },
          styles: {
            type: "array",
            displayName: "Animated Styles",
            description: "CSS properties to animate when triggered",
            itemType: {
              type: "object",
              fields: {
                property: {
                  type: "choice",
                  displayName: "CSS Property",
                  description: "Which CSS property to animate",
                  options: [
                    "top",
                    "left",
                    "right",
                    "bottom",
                    "width",
                    "height",
                    "opacity",
                    "borderRadius",
                    "scale",
                    "rotate",
                    "translateX",
                    "translateY",
                    "translateZ",
                    "scaleX",
                    "scaleY",
                    "scaleZ",
                    "rotateX",
                    "rotateY",
                    "rotateZ",
                    "skewX",
                    "skewY",
                    "backgroundColor",
                    "color",
                    "fontSize",
                    "letterSpacing",
                    "lineHeight",
                    "padding",
                    "margin",
                    "borderWidth",
                    "boxShadow",
                    "textShadow",
                    "filter",
                    "backdropFilter",
                  ],
                  defaultValue: "opacity",
                },
                endValue: {
                  type: "string",
                  displayName: "End Value",
                  description: "Final value after animation completes",
                  defaultValue: "1",
                },
              },
            },
          },
        },
      },
    },   
    zIndex: {
      type: "number",
      defaultValue: 1000,
      displayName: "Z-Index",
      description: "Stacking order",
    },
  },
  importPath: "./components/effects/CustomScroll",
  isDefaultExport: false,
});

 // Legacy props for backwards compatibility (hidden when breakpoints are used)
    // startTop: {
    //   type: "string",
    //   displayName: "Start Top",
    //   description: "Initial top position (e.g., '100px', '50vh', '10%')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startLeft: {
    //   type: "string",
    //   displayName: "Start Left",
    //   description: "Initial left position (e.g., '0px', '25vw')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startRight: {
    //   type: "string",
    //   displayName: "Start Right",
    //   description: "Initial right position (e.g., '0px', '10vw')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startBottom: {
    //   type: "string",
    //   displayName: "Start Bottom",
    //   description: "Initial bottom position (e.g., '20px', '5vh')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endTop: {
    //   type: "string",
    //   displayName: "End Top",
    //   description: "Final top position (e.g., '500px', '80vh')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endLeft: {
    //   type: "string",
    //   displayName: "End Left",
    //   description: "Final left position (e.g., '100px', '50vw')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endRight: {
    //   type: "string",
    //   displayName: "End Right",
    //   description: "Final right position (e.g., '100px', '20vw')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endBottom: {
    //   type: "string",
    //   displayName: "End Bottom",
    //   description: "Final bottom position (e.g., '100px', '10vh')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // scrollStart: {
    //   type: "number",
    //   defaultValue: 0,
    //   displayName: "Scroll Start (px)",
    //   description: "Interpolation: animation start | Duration: trigger point",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // scrollEnd: {
    //   type: "number",
    //   defaultValue: 1000,
    //   displayName: "Scroll End (px)",
    //   description: "Scroll position where interpolation completes (interpolation mode only)",
    //   hidden: (props) => props.animationMode !== "interpolation" || (props.breakpoints && props.breakpoints.length > 0),
    // },
    // startOpacity: {
    //   type: "number",
    //   defaultValue: 1,
    //   min: 0,
    //   max: 1,
    //   displayName: "Start Opacity",
    //   description: "Initial opacity (0-1)",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endOpacity: {
    //   type: "number",
    //   defaultValue: 1,
    //   min: 0,
    //   max: 1,
    //   displayName: "End Opacity",
    //   description: "Final opacity (0-1)",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startBorderRadius: {
    //   type: "string",
    //   displayName: "Start Border Radius",
    //   description: "Initial border radius (e.g., '0px', '50%', '20px')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endBorderRadius: {
    //   type: "string",
    //   displayName: "End Border Radius",
    //   description: "Final border radius (e.g., '50%', '100px', '0px')",
    //   defaultValueHint: "0px",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startWidth: {
    //   type: "string",
    //   displayName: "Start Width",
    //   description: "Initial width (e.g., '100px', '50vw', '100%')",
    //   defaultValueHint: "auto",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endWidth: {
    //   type: "string",
    //   displayName: "End Width",
    //   description: "Final width (e.g., '200px', '80vw', '50%')",
    //   defaultValueHint: "auto",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // startHeight: {
    //   type: "string",
    //   displayName: "Start Height",
    //   description: "Initial height (e.g., '100px', '50vh', '100%')",
    //   defaultValueHint: "auto",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // endHeight: {
    //   type: "string",
    //   displayName: "End Height",
    //   description: "Final height (e.g., '200px', '80vh', '50%')",
    //   defaultValueHint: "auto",
    //   hidden: (props) => props.breakpoints && props.breakpoints.length > 0,
    // },
    // zIndex: {
    //   type: "number",
    //   defaultValue: 1000,
    //   displayName: "Z-Index",
    //   description: "Stacking order",
    // },